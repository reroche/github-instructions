[
["index.html", "Project 4: Github Instructions – Draft Welcome", " Project 4: Github Instructions – Draft Cyrus Daruwala, Xiong-Fei Du, Elias Roche, Kylee Santos April 24, 2019 Welcome Art party 8-bit kitsch flexitarian fam vexillologist semiotics. Fanny pack farm-to-table messenger bag blog four dollar toast meh knausgaard scenester man bun keytar XOXO biodiesel deep v woke. Authentic unicorn four dollar toast la croix, tilde plaid fashion axe health goth. Umami man braid stumptown, succulents hashtag hell of cred. Air plant gastropub locavore, heirloom viral woke scenester gentrify. Ugh iPhone heirloom cold-pressed, health goth church-key intelligentsia readymade brooklyn williamsburg flexitarian pop-up wolf. Taiyaki keytar 3 wolf moon paleo fixie, biodiesel next level. Af scenester aesthetic, typewriter kinfolk literally pickled enamel pin post-ironic heirloom prism mlkshk cliche copper mug migas. Disrupt polaroid kombucha intelligentsia. Vinyl VHS selfies skateboard artisan. Roof party asymmetrical put a bird on it, raw denim bitters sartorial disrupt austin biodiesel thundercats hell of poke twee mumblecore seitan. Squid franzen raw denim fashion axe meh fam vegan schlitz. Shoreditch 90’s twee, 8-bit thundercats trust fund craft beer ennui poutine poke pok pok vaporware kinfolk tacos. "],
["preface.html", "Preface Background Information", " Preface Background Information Williamsburg iceland narwhal plaid leggings pickled direct trade portland pork belly. Pour-over jianbing sustainable iceland PBR&amp;B before they sold out umami chambray shabby chic. Cornhole normcore cliche roof party copper mug. +1 chambray iPhone, enamel pin quinoa kogi green juice ugh taxidermy bitters coloring book irony salvia. Example Workflow "],
["setting-up-repos.html", "1 Setting Up Git Repositories (Elias) 1.1 git init 1.2 git clone 1.3 Forking on GitHub", " 1 Setting Up Git Repositories (Elias) 1.1 git init The init command creates an empty git repository – a .git directory containing everything you need for version control in this repository. Command Line To initialize a repository from the command line: Navigate to desired parent directory: This directory will contain the git repository. $ cd ~/cmu/76270/project4/ Create a directory for your repository: $ mkdir github-instructions Navigate to new directory: $ cd github-instructions Initialize the repository: $ git init GitHub On github.com, the init command is run automatically when a repository is created. Ensure that you are logged in before following these steps: Navigate to home page: http://github.com Click on the green New button on the top-left of the page: Enter a name for the repository: The name of the repository must be unique to your user – that is, you cannot give two repositories the same name. Enter additional customizations: You can include an optional description to provide more information about the purpose of the repository. Repositories can be public (others can view and use your code), or private (only you and invited users can access the repository). README.md, .gitignore, and LICENSE are typical files to include in a repository. They are addressed in a later section. Click on Create Repository to complete. The page will be redirected to the empty repositories home page. Finally, set up the repository: You can create a new repository on the command line by running: echo &quot;# github-instructions&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin git@github.com:reroche/github-instructions.git git push -u origin master Or you can import an existing repository on your computer into this GitHub new repository by running: git remote add origin git@github.com:reroche/github-instructions.git git push -u origin master 1.2 git clone The clone command creates a copy of a of a repository into a newly created directory. All repositories on GitHub have a unique URL, in the format: https://github.com/username/repository-name.git The repository for this instructions, for example, is available at https://github.com/reroche/github-instructions. Command Line To clone a repository from the command line: Navigate to the desired parent directory. $ cd ~/cmu/76270/project4/ Clone the repository using its GitHub URL: The new repository will be in a directory with its original name (e.g. github-instructions). $ git clone https://github.com/reroche/github-instructions.git GitHub The online interface allows you to easily browse and copy repository URLs to clone via the command line. To clone or download a repository from Github: Navigate to the repository URL: https://github.com/reactjs/reactjs.org Click the green “Clone or Download” button: Copy the link and clone from the command line, or download ZIP file. 1.3 Forking on GitHub Forking is copying a repository that belongs to another user into your repositories, granting you ownership permissions over that repository. Forking cannot be done via the command line. To fork a repository on Github, simply click the “Fork” button on the top right of a repository’s home page. "],
["making-changes.html", "2 Making Changes (Kylee) 2.1 git add 2.2 git commit 2.3 git status", " 2 Making Changes (Kylee) When making changes to a repository, generally a combination of git add, git commit, and git status will be used. The high level procedure for making changes is the following: Step 1. Make edits to files in the repository. Step 2. Add edited files to the staging area. Step 3. Check which files have been staged/unstaged. Step 4. Save these changes in a commit. 2.1 git add The add command allows users to add files to the staging area (Step 2). This essentially lets Git know that you made changes to the file and you would like to save them. However, using the add command does not actually save the changes yet. That functionality is done by git commit. Here are a few ways to use the git add command: (1) Adding new or modified files individually, (2) Adding all tracked and untracked files in the working directory, (3) Adding all tracked and untracked files (new, modified, and deleted). Adding files individually $ git add README.md draft.Rmd NOTE: If you include multiple files, they must be separated by a space. Adding all tracked and untracked files in the working directory $ git add . Adding all tracked and untracked files (new, modified, and deleted) $ git add -A Tracked files are files that are included in the remote git repository. So, if you make changes to any of those files, they are already tracked. However, if you create new files locally in the root directory, these files are untracked. Since you just created them, git does not track them since they are not yet in the remote git repository. 2.2 git commit The commit command actually saves any changes to files you made. In conjunction with git add, the commit command will save all files that you have previously added to the staging area. Each commit is a snapshot, or a saved state, of your repository. Commits also require messages or captions to go along with them, usually describing the kinds of changes made. This is beneficial if later on you are looking at all of your previous commits and want to see what changes you made in each one. Because these commit messages are so useful, there are two ways to write them. One-line commit message $ git commit -m &quot;Update add, commit, status sections in draft&quot; Multi-line commit message $ git commit 2.3 git status The status command allows you to display any changes you have made to the directory you are currently working in. It details which changes have been staged (using git add), which changes have not, and which files are not being tracked by Git. Essentially, you will be able to see which files Git will save if you were to commit. This allows you to first, see which files you have changed, and second, confirm all the files you want/don’t want to track. 2.3.1 Workflow Going back to the high level procedure of how to make changes, here is an example of how to use these commands in conjunction. Suppose I am working on a repository called github-instructions and I have just made changes to the README.md and draft.Rmd files. Using git status gives me a summary of the files I have changed, and further git add can move these changes to the staging area to be committed. Using git status once again will now display an updates summary displayed that the files are now in the staging area. Finally, I can save these changes with a one-line commit message. And just like that, we have successfully saved changes to our repository! "],
["tools-local.html", "3 Tools for Working Locally (Xiong-Fei) 3.1 git stash 3.2 git log 3.3 git diff", " 3 Tools for Working Locally (Xiong-Fei) 3.1 git stash The stash command stores away your current local changes to revert to the previous commit. This is typically done when you have made changes to a repository that you have not committed, but want to undo. 3.1.1 Command Line Suppose you already have local changes in the repository that you want to stash away. To stash changes in command line: Navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ Clear uncommitted changes: $ git stash Now observe that your local changes are now gone. To bring these changes back, you can run the following command: $ git stash pop 3.2 git log The log command allows you to see the history of commits made to your repository. 3.2.1 Command Line To see the history of commits: Navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ To view commit history: $ git log Now observe the history of commits to this repository. What you will see in your terminal is a series of commits in the following format. Each commit has a commit hash, the user who made the commit, the time of the commit, and the commit message. The name of the branch, the commit hash, and the commit message are denoted in the above figure. 3.2.2 GitHub We can also see a log of our commits in Github. This can be done as follows: From the homepage of your Git repository on Github, click on the “Commits” tab: Now we can see the history of commits, in the following format: To view a commit in more detail, click on the commit message. Now you will see how that commit modified the files in our repository. The lines highlighted in red denotes what was removed, and lines highlighted in green show what was added: 3.3 git diff The diff command allows you to see local changes you have made, but not yet committed, to your repository. 3.3.1 Command Line To see your local changes: Navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ To view local changes: $ git diff Now observe your local changes to this repository. The file name is highlighted in the following figure. Meanwhile, lines with red text show the contents of the file that were deleted while lines with green text show the added content since your last commit. While you are in diff, you may hit the Enter or Return key to see more lines of differences. You may also hit Q to exit. "],
["syncing-github.html", "4 Syncing your local files with Github (Cyrus) 4.1 git push 4.2 git pull", " 4 Syncing your local files with Github (Cyrus) 4.1 git push The git push command is used to trasfer committed changes from a local repository to a remote repository. This allows you to make your changes available to the rest of the users of the repository. 4.1.1 Command Line Navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ Before continuing, make sure that you have committed your changes you want to push using git commit. To check the number of unpushed local commits: $ git status The terminal output would look as follows: In the result above, it says that our branch (the local repository) is ahead of origin/master (the remote repository) by 1 commit. To push these changes: $ git push The terminal output would look as follows: If we now check the number of unpushed local commits using git status, we notice that our branch is up to date (0 commits behind) with ‘origin/master’. 4.2 git pull The git pull command is used to transfer changes pushed by other users on the remote repository to the user’s local repository. This allows you to view everyone else’s pushed changes in your local repo. Navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ To obtain changes made by other users: $ git pull The resulting terminal output: "]
]
