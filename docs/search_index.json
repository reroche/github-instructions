[
["index.html", "Project 4: Github Instructions Welcome! Who This Guide Is For Why Should I Learn Git Why GitHub What You Need To Get Started With Git", " Project 4: Github Instructions Cyrus Daruwala, Xiong-Fei Du, Elias Roche, Kylee Santos May 1, 2019 Welcome! Who This Guide Is For If you are someone who is familiar with a Unix-like terminal environment and wants to learn Git basics, then this guide is for you. If you are a CMU student who has taken 15-110 Principles of Computing or 15-122 Principles of Imperative Computation, then you have worked in a Unix-like terminal environment. This guide provides instructions on how to use Git and Github, which will help you manage your coding projects as you take more advanced coursework. Knowledge of Git will come in handy if you take 15-213/18-213 Introduction to Computer Systems or any 400+ level systems elective. This guide is not a complete documentation of Git. Rather, this guide is meant for you to develop a working basis for using Git. Why Should I Learn Git Git is a version control system that allows users to manage a coding project in a distributed manner. Git will allow you to keep track of previous changes to your code. Additionally, Git allows multiple users to collaborate on a coding project. Using Git, you can easily keep track of who made a change, what changes were made, and when someone made changes. The tools that Git provides makes it easy for a large team of developers to collaborate. Git is widely used in the software industry, and many employers will assume knowledge of Git as you enter a software position. Why GitHub TODO: @elias What You Need To Get Started With Git A Unix-like environment: This guide contains many commands that can be copied directly into Unix-like command lines. MacOS and Linux are both Unix-like environments. A Unix-like environment can be set up in Windows by installing Git Bash, which can be downloaded here. A GitHub account: A GitHub account is free and will allow you to host unlimited public repositories. Using your CMU email address (or any address with a .edu suffix) will grant you free access to a GitHub premium account, which allows you to host private repositories as well. It is strongly encouraged that you use your CMU email address to create an account before proceeding with this guide. Click here to create your account. "],
["terminology-and-workflow.html", "Terminology and Workflow Glossary of Terms Workflow", " Terminology and Workflow In this section we provide a glossary of terms and an example of a Git workflow involving two users. We recommend that you familiarize yourself with these terms before proceeding, and follow the example of the workflow in the diagram to better understand what Git is doing when each command is run. Glossary of Terms Term Definition Git A popular version control program that allows multiple programmers to collaborate on a software project and keep track of code development. GitHub A server that that hosts Git repositories remotely. Directory A folder on your hard drive. Staging Area Collection of files that user wants to save the changes of. Files must first be added to the staging area before their changes can be saved into a commit. Tracked Files Files in your working directory that Git saves in its repository and checks to see if changes have been made to them. Untracked Files Files in your working directory that are unknown to Git, therefore any changes to these files are not recorded. Any time a user creates a new file, it starts as an untracked file until it is add using git add. Commit A collection of saved changes that a user has made. After adding files to the staging area, these changes can actually be saved using git commit. Commit Message String of characters chosen by the user to label the commit. Commit Hash String of automatically-generated alpha-numeric characters that Git uses to identify a commit. Branch A series of commits in a project, which keeps track of our revision history. Developers usually have multiple branches if they want to maintain different versions of a project. The default branch is called master. Repository A folder that contains all of the files for your project. Your project’s repository contains all of your project’s files, commits, and branches. You can also discuss and manage your project’s work within the repository. Remote The remote repository is the version of our project stored on a server far away, such as Github, which can be contrasted with local repositories. When we push our changes successfully, these changes are reflected in the remote repository. Branches in remote repositories start with origin/. Local The local repository is the version of our project stored on a individual user’s machine, which can be contrasted with remote repositories. When a user makes changes on a private computer without pushing, the user is only modifying the local repository. Branches in local repositories don’t start with origin/. For example, regarding the main branch master, the local branch is master, and the remote branch is origin/master. Command Line A command line interface is an environment where a user interacts with a computer by typing line-by-line instructions into the computer. Terminal An application that allows users to work in a command-line interface. A terminal, such as Terminal on Mac OS and Linux or Git Bash on Windows, is considered Unix-like if it is similar to a Unix terminal. Workflow Git is often used by multiple users to collaborate on a coding project. To get a better idea of how this process might work in its use cases, here is an example of how Git is commonly used. Consider the case where two users want to create a repository, work on some of the files individually, and combine their changes for the final product. This can be accomplished by performing the following steps. An illustration of how these commands interact with the actual repository is also included below. For more information on how to use these commands, please see the detailed instructions that follow. One of the users calls git init to create the repository. User 1 calls git clone to copy the created remote repository so that they can work on their local computer. User 2 also calls git clone to copy the created remote repository locally. User 1 starts the project by adding some files to the repository. User 1 calls git add to add these new files to the staging area so that git knows which files should be saved. User 1 calls git commit to save the changes in the staging area into a commit. User 1 calls git push to upload their changes from their local computer to the remote repository so both users can see the changes. User 2 calls git pull to download the changes made from the remote repository to their local computer and works on the latest version of the repository. User 2 edits some of the files and creates their own files. User 2 calls git add to include these files in the staging area. User 2 calls git commit to save the changes locally into a commit. User 2 calls git push to upload their changes to the remote repository for both users to see. This workflow is also detailed in the diagram below: "],
["setting-up-repos.html", "1 Setting Up Git Repositories 1.1 git init 1.2 git clone 1.3 Forking on GitHub", " 1 Setting Up Git Repositories In this section we will be showing you how to set up Git repositories, how to host them on GitHub, and how to copy existing repositories. When running these commands on your own computer make sure to use your own GitHub username and the directory in which you want to set up your repository. The examples in this page are commands used to set up the repository that contains this website (i.e. username: reroche, directory: ~/cmu/76270/project4/github-instructions). 1.1 git init The init command creates an empty git repository – a hidden .git directory containing everything you need for version control in this repository. When do I use this command?: Use git init whenever you want to turn a directory into a Git repository. Command Line To initialize a repository from the command line: Open Terminal, and navigate to desired parent directory: This directory will contain the git repository. $ cd ~/cmu/76270/project4/ Create a directory for your repository: $ mkdir github-instructions Navigate to new directory: $ cd github-instructions Initialize the repository: $ git init GitHub On github.com, the init command is run automatically when a repository is created. Ensure that you are logged in before following these steps: Navigate to home page: http://github.com Click on the green New button on the top-left of the page: Enter a name for the repository: The name of the repository must be unique to your user – that is, you cannot give two repositories the same name. Enter additional customizations: You can include an optional description to provide more information about the purpose of the repository. Repositories can be public or private. In a public repository, others can view and use your code, but in a private directory, only you and invited users can access the repository. README.md, .gitignore, and LICENSE are typical files to include in a repository. They are addressed in a later section. Click on Create Repository to complete. The page will be redirected to the empty repositories home page. Finally, set up the repository: You can create a new repository on the command line by running: echo &quot;# github-instructions&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin git@github.com:reroche/github-instructions.git git push -u origin master Or you can import an existing repository on your computer into this GitHub new repository by running: git remote add origin git@github.com:reroche/github-instructions.git git push -u origin master More details regarding these Git commands are discussed in later sections. 1.2 git clone The clone command creates a copy of a of a repository into a newly created directory. All repositories on GitHub have a unique URL, in the format: https://github.com/username/repository-name.git The repository for this instructions, for example, is available at https://github.com/reroche/github-instructions. Command Line To clone a repository from the command line: Open Terminal, and navigate to desired parent directory: $ cd ~/cmu/76270/project4/ Clone the repository using its GitHub URL: The new repository will be in a directory with its original name (e.g. github-instructions). $ git clone https://github.com/reroche/github-instructions.git GitHub The online interface allows you to easily browse and copy repository URLs to clone via the command line. To clone or download a repository from Github: Navigate to the repository URL: https://github.com/reactjs/reactjs.org Click the green “Clone or download” button: Copy the link and clone from the command line, or download ZIP file. $ git clone https://github.com/reactjs/reactjs.org.git 1.3 Forking on GitHub Forking is copying a repository that belongs to another user into your repositories, granting you ownership permissions over that repository. Forking cannot be done via the command line. To fork a repository on Github, simply click the “Fork” button on the top right of a repository’s home page. "],
["making-changes.html", "2 Making Changes 2.1 git add 2.2 git commit 2.3 git status", " 2 Making Changes When making changes to a repository, generally a combination of git status, git add, and git commit will be used. The high level procedure for making changes is the following: Make edits to files in the repository. Check which files have been added/modified/deleted and which files have been staged/unstaged. Add edited files to the staging area. Save these changes in a commit. In order to understand the output of git status, it helps to know how the commands git add and git commit work first. 2.1 git add The add command allows users to add files to the staging area (Step 3). This essentially lets Git know that you made changes to the file and you would like to save them. However, using the add command does not actually save the changes yet. That functionality is done by git commit. 2.1.1 Command Line First, open Terminal and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ Now you are ready to add files. You can add files in terminal either individually or all at once. Adding files individually (NOTE: If you include multiple files, they must be separated by a space.) For example, this command will add README.md and book/02.Rmd to the staging area: $ git add README.md book/02.Rmd Adding all tracked and untracked files in this repository (new, modified, and deleted) $ git add -A Tracked files are files that are included in the remote Git repository. So, Git will be able to track and record any changes made to these files. However, if you create new files locally, these files are untracked. Since you just created them, Git cannot track them since they are not yet in the remote Git repository. You must use the git add command in order to add these files to the remote Git repository so that Git can track them. 2.2 git commit The commit command actually saves any changes to files you made (Step 4). In conjunction with git add, the commit command will save all files that you have previously added to the staging area. Each commit is a snapshot, or a saved state, of your repository. Commits also require messages or captions to go along with them, usually describing the kinds of changes made. Commit messages are meant to help you, the user, identify different commits, so you should choose a helpful commit message. This is beneficial if later on you are looking at all of your previous commits and want to see what changes you made in each one. Because these commit messages are so useful, there are two ways to write them. Before proceeding, make sure that you have run git add to stage all of the changes you want to commit. 2.2.1 Command Line First, open Terminal and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ Now you can commit. There are two different ways of making a commit: One-line commit message $ git commit -m &quot;Update add, commit, status sections in draft&quot; Multi-line commit message. Note: If you choose to commit your changes this way, Git will enter a vim-like editor for you to edit the commit message. You should only choose this method if you are comfortable with using vim. $ git commit 2.3 git status The status command allows you to display any changes you have made to the directory you are currently working in (Step 2). It details which changes have been staged (using git add), which changes have not, and which files are not being tracked by Git. Essentially, you will be able to see which files Git will save if you were to commit. This allows you to first, see which files you have changed, and second, confirm all the files you want/don’t want to track. 2.3.1 Workflow Going back to the high level procedure of how to make changes, here is an example of how to use these commands in conjunction. Suppose we are working on a repository called github-instructions and we have just made changes to README.md and draft.Rmd, deleted a few image files, and also added new image files. First, open Terminal and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ Using git status gives us a summary of the files we have changed, and further git add can move these changes to the staging area to be committed. Using git status once again will now display an updates summary displayed that the files are now in the staging area. Finally, we can save these changes with a one-line commit message. And just like that, we have successfully saved changes to our repository! "],
["syncing-github.html", "3 Syncing your local files with Github 3.1 git push 3.2 git pull", " 3 Syncing your local files with Github 3.1 git push The git push command is used to upload your commits from a local repository to a remote repository. This allows you to make your changes available to the rest of the users of the repository. 3.1.1 Command Line Open Terminal, and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ Before continuing, make sure that you have committed your changes you want to push using git commit. To check the number of unpushed local commits: $ git status The terminal output would look as follows: In the result above, it says that our branch (the local repository) is ahead of origin/master (the remote repository) by 1 commit. To push these changes: $ git push The terminal output would look as follows: If we now check the number of unpushed local commits using git status, we notice that our branch is up to date (0 commits behind) with ‘origin/master’. 3.2 git pull The git pull command is used to transfer changes pushed by other users on the remote repository to the user’s local repository. This allows you to view everyone else’s pushed changes in your local repo. Open Terminal, and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ To obtain changes made by other users: $ git pull If we succeed, we will see the resulting terminal output: Note that the green + represents a line added and a red - represents a line deleted. However, note that sometimes, git pull is unsuccessful. Usually, this is because the files that we have made local changes that the remote repository does not know about. This case is typically exemplified with the following error message: In that case, we must first commit our local changes using git add and git commit as previously specified, or we must stash these changes using git stash, which will be explained our upcoming section. After we have done so, we can try git pull again. "],
["tools-local.html", "4 Tools for Working Locally 4.1 git stash 4.2 git log 4.3 git diff", " 4 Tools for Working Locally 4.1 git stash The git stash command stores away your current local changes to revert to the previous commit. This is typically done when you have made changes to a repository that you have not committed, but want to undo. 4.1.1 Command Line Suppose you already have local changes in the repository that you want to stash away. One case you may want to do this is if there are local, uncommitted changes in your repository, and you want to pull the latest changes using git pull. To stash changes in command line: Open Terminal, and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ Clear uncommitted changes: $ git stash Now observe that your local changes are now gone. To bring these changes back, you can run the following command: $ git stash pop 4.2 git log The git log command allows you to see the history of commits made to your repository. 4.2.1 Command Line To see the history of commits: Open Terminal, and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ To view commit history: $ git log Now observe the history of commits to this repository. What you will see in your terminal is a series of commits in the following format: Each commit has a commit hash, the user who made the commit, the time of the commit, and the commit message. The name of the branch, the commit hash, and the commit message are denoted in the above figure. 4.2.2 GitHub We can also see a log of our commits in Github. This can be done as follows: From the homepage of your Git repository on Github, click on the “Commits” tab: Now we can see the history of commits, in the following format: To view a commit in more detail, click on the commit message. Now you will see how that commit modified the files in our repository. The lines highlighted in red denotes what was removed, and lines highlighted in green show what was added: 4.3 git diff The git diff command allows you to see local changes you have made, but not yet committed, to your repository. 4.3.1 Command Line To see your local changes: Open Terminal, and navigate to desired directory: $ cd ~/cmu/76270/project4/github-instructions/ To view local changes: $ git diff Now observe your local changes to this repository. The file name is highlighted in the following figure. Meanwhile, lines with red text show the contents of the file that were deleted while lines with green text show the added content since your last commit. While you are in diff, you may hit the Enter or Return key to see more lines of differences. You may also hit Q to exit. "]
]
